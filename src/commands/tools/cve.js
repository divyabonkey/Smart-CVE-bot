const { SlashCommandBuilder } = require("discord.js");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("cve")
    .setDescription("Search for CVEs and get POC and patch links.")
    .addStringOption((option) =>
      option
        .setName("query")
        .setDescription("The CVE search query.")
        .setRequired(true)
    ),
  async execute(interaction) {
    const query = interaction.options.getString("query");

    const url = `https://services.nvd.nist.gov/rest/json/cves/1.0?keyword=${query}`;

    try {
      const response = await fetch(url);
      if (response.status !== 200) {
        throw new Error("Failed to retrieve CVE search results.");
      }

      const data = await response.json();
      const cves = data.result.CVE_Items;

      if (cves.length === 0) {
        interaction.reply(`No results found for "${query}".`);
        return;
      }

      const links = cves.map((cve) => {
        const id = cve.cve.CVE_data_meta.ID;
        const pocUrl = cve.cve.references.reference_data.find((ref) =>
          ref.tags.includes("Exploit")
        )?.url;
        const patchUrl = cve.cve.references.reference_data.find((ref) =>
          ref.tags.includes("Patch")
        )?.url;
        return { id, pocUrl, patchUrl };
      });

      const embed = {
        color: 0x00ff00,
        title: `Search results for "${query}"`,
        fields: links.map((link) => ({
          name: link.id,
          value: `POC: ${link.pocUrl || "N/A"}\nPatch: ${
            link.patchUrl || "N/A"
          }`,
          inline: false,
        })),
      };
      interaction.reply({ embeds: [embed] });
    } catch (error) {
      console.error(error);
      interaction.reply("Error: Failed to retrieve CVE search results.");
    }
  },
};
